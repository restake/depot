name: "Build Binary"

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Specify the version"
        required: true
        default: "v1.18.22"
      repository:
        description: "Specify the repository"
        required: true
        default: "composable-cosmos"
      organization:
        description: "Specify the organization"
        required: true
        default: "ComposableFi"
      protocol:
        description: "Specify the protocol"
        required: true
        default: "centauri"
      binaryname:
        description: "Specify the binary name"
        required: true
        default: "centaurid"
      cpu:
        description: "Specify the cpu"
        required: true
        default: "generic"
      arch:
        description: "Specify the arch"
        required: true
        default: "x86_64"
      purpose:
        description: "Specify the purpose"
        required: true
        default: "node"
  pull_request:
    branches:
      - "master"

env:
  version: "${{ inputs.version || 'v1.17.22-jito' }}"
  repository: "${{ inputs.repository || 'jito-solana' }}"
  organization: "${{ inputs.organization || 'jito-foundation' }}"
  protocol: "${{ inputs.protocol || 'jito' }}"
  binaryname: "${{ inputs.binaryname || 'solana-jito' }}"
  cloudflare_key_id: ${{ secrets.R2_ACCESS_KEY_ID }}
  cloudflare_secret: ${{ secrets.R2_SECRET_ACCESS_KEY }}
  cloudflare_account: ${{ secrets.cloudflare_account }}
  cpu: "${{ inputs.cpu || 'generic' }}"
  arch: "${{ inputs.arch || 'x86_64' }}"
  purpose: "${{ inputs.purpose || 'node' }}"


jobs:
  build:
    name: "Build"
    runs-on: "ubuntu-latest-l"
    steps:
      - id: "setup-dependencies"
        name: "Install required system packages"
        run: |
          sudo add-apt-repository -y ppa:rmescandon/yq
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends build-essential curl git musl-dev jq yq
      - uses: actions/checkout@v2
      - id: "setup-builder"
        name: "Setup Builder"
        run: |
          chmod +x ${GITHUB_WORKSPACE}/scripts/setup-builder.sh
          export BINARY_PROTOCOL="${{ env.protocol }}"
          sh ${GITHUB_WORKSPACE}/scripts/setup-builder.sh
      - id: "clone-pipeline"
        name: "Clone pipeline"
        uses: "actions/checkout@v4"
        with:
          path: "pipeline"

      - id: "clone"
        name: "Clone Protocol source"
        uses: "actions/checkout@v4"
        with:
          repository: "${{ env.organization }}/${{ env.repository }}"
          fetch-tags: true
          path: "${{ env.protocol }}"
          ref: "refs/tags/${{ env.version }}"
          submodules: true

      - id: "apply-patches"
        name: "Apply patches"
        run: |
          set -euo pipefail
          shopt -s nullglob
          cd "${GITHUB_WORKSPACE}/centauri"
          git am --3way "${GITHUB_WORKSPACE}/pipeline/patches"/*.patch

      - name: "Run protocol-specific build script"
        run: |
          protocol_script="${GITHUB_WORKSPACE}/scripts/${{ env.protocol }}-build.sh"
          chmod +x ${{ env.protocol }}-build.sh
          if [ -f "$protocol_script" ]; then
            export BINARY_ARCH="${{ env.arch }}"
            export BINARY_VERSION="${{ env.version }}"
            export BINARY_PROTOCOL="${{ env.protocol }}"
            bash "$protocol_script"
          else
            echo "Error: Invalid repository specified or missing build script '$protocol_script'"
            exit 1
          fi

      - name: List Repository Contents
        run: ls -R
  
      - id: "upload-artifact"
        name: "Save binary to workspace"
        uses: "actions/upload-artifact@v3"
        with:
          name: "${{ env.protocol }}-validator"
          path: "${{ env.protocol }}/bin/${{ env.binaryname }}-${{env.version}}-${{env.arch}}"
          if-no-files-found: "error"
          retention-days: 1

      - id: "setup-rclone"
        name: "Set up rclone CLI"
        run: |
          curl https://rclone.org/install.sh | sudo bash

      - id: "substitue-rclone-config"
        name: Substitute Variables in rclone Template
        run: |
          export RCLONE_CONFIG_R2_TYPE=s3
          export RCLONE_CONFIG_R2_ACCESS_KEY_ID=${{env.cloudflare_key_id}}
          export RCLONE_CONFIG_R2_SECRET_ACCESS_KEY=${{env.cloudflare_secret}}
          export RCLONE_CONFIG_R2_REGION=auto
          export RCLONE_CONFIG_R2_PROVIDER=Cloudflare
          export RCLONE_CONFIG_R2_ENDPOINT=https://41b3fe4c8001defd8adf7a0ceafb504d.r2.cloudflarestorage.com
          export RCLONE_CONFIG_R2_ACL=private
          export RCLONE_CONFIG_R2_NO_CHECK_BUCKET=true

          rclone copy "${{ env.protocol }}/bin/${{ env.binaryname }}-${{env.version}}-${{env.arch}}" r2:binaries/${{env.purpose}}/${{env.protocol}}/${{env.version}}