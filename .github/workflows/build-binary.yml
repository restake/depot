name: "Build Binary"

on:
  workflow_dispatch:
    inputs:
      binary_version:
        description: "Specify the version"
        required: true
        default: "v1.18.22"
      repository_name:
        description: "Specify the repository"
        required: true
        default: "composable-cosmos"
      repository_org:
        description: "Specify the organization"
        required: true
        default: "ComposableFi"
  repository_dispatch:
    types:
      - webhook
  pull_request:
    branches:
      - "master"

env:
  DEPOT_BINARY_VERSION: "${{ inputs.binary_version || 'v6.4.3' }}"
  DEPOT_REPOSITORY_NAME: "${{ inputs.repository_name || 'composable-cosmos' }}"
  DEPOT_REPOSITORY_ORG: "${{ inputs.repository_org || 'ComposableFi' }}"
  DEPOT_BUCKET_NAME: "depot"
  DEPOT_BUCKET_PUBLIC_URL: "https://depot.r2.restake.cloud"
  RCLONE_CONFIG_R2_TYPE: "s3"
  RCLONE_CONFIG_R2_PROVIDER: "Cloudflare"
  RCLONE_CONFIG_R2_REGION: "auto"
  RCLONE_CONFIG_R2_ACL: "private"
  RCLONE_CONFIG_R2_NO_CHECK_BUCKET: "true"
  RCLONE_CONFIG_R2_ACCESS_KEY_ID: "${{ secrets.R2_ACCESS_KEY_ID }}"
  RCLONE_CONFIG_R2_SECRET_ACCESS_KEY: "${{ secrets.R2_SECRET_ACCESS_KEY }}"
  RCLONE_CONFIG_R2_ENDPOINT: "${{ secrets.R2_ENDPOINT}}"
  SLACK_BOT_TOKEN: "${{ secrets.SLACK_BOT_TOKEN }}"
  SLACK_CHANNEL_ID: "C06QF8AKYMV"

jobs:
  build:
    name: "Build"
    runs-on: "ubuntu-latest-l"
    outputs:
      binaries-output: "${{ steps.binaries-output.outputs.binaries }}"
    steps:
      - id: "checkout"
        name: "Checkout code"
        uses: actions/checkout@v4

      - id: "setup-deno"
        name: "Set up Deno"
        uses: denolib/setup-deno@v2
        with:
          deno-version: 1.41.0

      - id: "setup-envvars"
        name: "Set up environment variables"
        run: deno run --allow-write --allow-env --allow-read ./utils/env.ts

      - id: "binaries-output"
        name: "Set DEPOT_BINARIES as output"
        run: echo "::set-output name=binaries::${{ env.DEPOT_BINARYNAMES }}"

      - id: "setup-builder-packages"
        name: "Install builder packages"
        run: bash ./builders/${{ env.DEPOT_BUILDER }}/deps.sh

      - id: "cache-tooling"
        name: "Cache tooling"
        uses: "actions/cache@v4"
        if: "${{ steps.setup-builder-packages.outputs.cached-tooling-key != '' }}"
        with:
          path: "${{ steps.setup-builder-packages.outputs.cached-tooling-path }}"
          key: "${{ steps.setup-builder-packages.outputs.cached-tooling-key }}"

      - id: "setup-builder"
        name: "Setup builder"
        run: bash ./builders/${{ env.DEPOT_BUILDER }}/setup.sh

      - id: "clone"
        name: "Clone Protocol source"
        uses: "actions/checkout@v4"
        with:
          repository: "${{ env.DEPOT_REPOSITORY_ORG }}/${{ env.DEPOT_REPOSITORY_NAME }}"
          fetch-tags: true
          path: "${{ env.DEPOT_NAME }}"
          ref: "refs/tags/${{ env.DEPOT_BINARY_VERSION }}"
          submodules: true

      - id: "apply-patches"
        name: "Apply patches"
        if: ${{ env.DEPOT_PATCHES == 'true' }}
        run: |
          set -euo pipefail
          shopt -s nullglob
          cd "${GITHUB_WORKSPACE}/${{ env.DEPOT_NAME }}"
          git am --3way "${GITHUB_WORKSPACE}/pipeline/patches"/*.patch

      - id: "build-binaries"
        name: "Run protocol-specific build script"
        run: bash "./scripts/${{ env.DEPOT_NAME }}/build.sh"

      - id: "upload-artifacts"
        name: "Save binary to workspace"
        uses: "actions/upload-artifact@v3"
        with:
          name: "binaries"
          path: "${{ env.DEPOT_BINARIES }}"
          if-no-files-found: "error"
          retention-days: 1

  upload:
    name: "Upload"
    needs: "build"
    runs-on: "ubuntu-latest"
    steps:
      - id: "download-artifacts"
        name: "Download binaries from workspace"
        uses: "actions/download-artifact@v3"
        with:
          name: "binaries"
          path: "binaries"

      - id: "setup-rclone"
        name: "Set up rclone CLI"
        run: |
          curl https://rclone.org/install.sh | sudo bash

      - id: "upload-binary"
        name: Upload binary to R2 bucket
        run: |
          set -euo pipefail

          for file in binaries/*; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              rclone copy "$file" "r2:${{ env.DEPOT_BUCKET_NAME }}/${{ env.DEPOT_PURPOSE }}/${{ env.DEPOT_NAME }}/${{ env.DEPOT_BINARY_VERSION }}/${filename}"
            fi
          done

  notify:
    name: "Notify on Slack"
    runs-on: "ubuntu-latest"
    needs: ["build", "upload"]
    if: ${{ always() }}
    outputs:
      build-status: ${{ needs.build.result }}
      upload-status: ${{ needs.upload.result }}
    steps:
      - name: Get workflow URL
        run: |
          workflow_url="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          echo "WORKFLOW_URL=${workflow_url}" >> "${GITHUB_ENV}"
          echo "DEPOT_BINARY_NAMES=${{ needs.build.outputs.binaries-output }}" >> "${GITHUB_ENV}"

      - id: "checkout"
        name: "Checkout code"
        uses: actions/checkout@v4

      - id: "slack-notify-success"
        name: "Notify on Slack upon success"
        uses: slackapi/slack-github-action@v1.25.0
        with:
          channel-id: ${{ env.SLACK_CHANNEL_ID }}
          payload-file-path: ${{ format('./templates/notify-{0}.json', needs.upload.result) }}
