name: "Build Binary"

on:
  workflow_dispatch:
    inputs:
      binary_version:
        description: "Specify the version"
        required: true
        default: "v1.18.22"
      repository_name:
        description: "Specify the repository"
        required: true
        default: "composable-cosmos"
      repository_org:
        description: "Specify the organization"
        required: true
        default: "ComposableFi"
  repository_dispatch:
    types:
      - webhook
  pull_request:
    branches:
      - "master"

env:
  DEPOT_BINARY_VERSION: "${{ inputs.binary_version || 'testnet-v1.20.0' }}"
  DEPOT_REPOSITORY_NAME: "${{ inputs.repository_name || 'sui' }}"
  DEPOT_REPOSITORY_ORG: "${{ inputs.repository_org || 'MystenLabs' }}"
  CLOUDFLARE_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
  CLOUDFLARE_SECRET: ${{ secrets.R2_SECRET_ACCESS_KEY }}
  CLOUDFLARE_ACCOUNT: ${{ secrets.cloudflare_account }}

jobs:
  build:
    name: "Build"
    runs-on: "ubuntu-latest-l"
    steps:
      - id: "checkout"
        name: "Checkout code"
        uses: actions/checkout@v4

      - id: "setup-deno"
        name: "Set up Deno"
        uses: denolib/setup-deno@v2
        with:
          deno-version: 1.41.0

      - id: "setup-envvars"
        name: "Set up environment variables"
        run: deno run --allow-write --allow-env --allow-read=config.yml ./utils/set-env.ts

      - id: "setup-common-packages"
        name: "Install common packages"
        run: |
          sudo add-apt-repository -y ppa:rmescandon/yq
          sudo apt-get update
          sudo apt-get install -y jq yq tree

      - id: "setup-builder-packages"
        name: "Install builder packages"
        run: bash ./builders/${{ env.DEPOT_BUILDER }}/deps.sh

      - id: "setup-builder"
        name: "Setup builder"
        run: bash ./builders/${{ env.DEPOT_BUILDER }}/setup.sh

      - id: "clone"
        name: "Clone Protocol source"
        uses: "actions/checkout@v4"
        with:
          repository: "${{ env.DEPOT_REPOSITORY_ORG }}/${{ env.DEPOT_REPOSITORY_NAME }}"
          fetch-tags: true
          path: "${{ env.DEPOT_NAME }}"
          ref: "refs/tags/${{ env.DEPOT_BINARY_VERSION }}"
          submodules: true

      - id: "apply-patches"
        name: "Apply patches"
        if: ${{ env.DEPOT_PATCHES == 'true' }}
        run: |
          set -euo pipefail
          shopt -s nullglob
          cd "${GITHUB_WORKSPACE}/${{ env.DEPOT_NAME }}"
          git am --3way "${GITHUB_WORKSPACE}/pipeline/patches"/*.patch

      - id: "build-binaries"
        name: "Run protocol-specific build script"
        run: bash "./scripts/${{ env.DEPOT_NAME }}/build.sh"

      - id: "upload-artifacts"
        name: "Save binary to workspace"
        uses: "actions/upload-artifact@v3"
        with:
          name: "binaries"
          path: "${{env.DEPOT_MULTILINE_BINARIES}}"
          if-no-files-found: "error"
          retention-days: 1

  # upload:
  #   name: "Upload"
  #   needs: "build"
  #   runs-on: "ubuntu-latest"
  #   steps:
  #     - id: "download-artifacts"
  #       name: "Download binaries from workspace"
  #       uses: "actions/download-artifact@v3"
  #       with:
  #         name: "binaries"
  #         path: "binaries"

  #     - id: "setup-rclone"
  #       name: "Set up rclone CLI"
  #       run: |
  #         curl https://rclone.org/install.sh | sudo bash

  #     - id: "upload-binary"
  #       name: Upload binary to R2 bucket
  #       run: |
  #         set -euo pipefail
  #         export RCLONE_CONFIG_R2_TYPE=s3
  #         export RCLONE_CONFIG_R2_ACCESS_KEY_ID=${{env.CLOUDFLARE_KEY_ID}}
  #         export RCLONE_CONFIG_R2_SECRET_ACCESS_KEY=${{env.CLOUDFLARE_SECRET}}
  #         export RCLONE_CONFIG_R2_REGION=auto
  #         export RCLONE_CONFIG_R2_PROVIDER=Cloudflare
  #         export RCLONE_CONFIG_R2_ENDPOINT=https://41b3fe4c8001defd8adf7a0ceafb504d.r2.cloudflarestorage.com
  #         export RCLONE_CONFIG_R2_ACL=private
  #         export RCLONE_CONFIG_R2_NO_CHECK_BUCKET=true

  #         for file in binaries/*; do
  #           if [ -f "$file" ]; then
  #             filename=$(basename "$file")
  #             rclone copy "$file" "r2:binaries/${{env.DEPOT_PURPOSE}}/${{env.DEPOT_NAME}}/${{env.DEPOT_BINARY_VERSION}}/${filename}"
  #           fi
  #         done
